[build-system]
    build-backend = "poetry.core.masonry.api"
    requires      = ["poetry-core>=1.0.0"]

[tool.poetry]
    authors = ["Noah Jenner <noah.jenner@proton.me>"]
    classifiers = [
        "Development Status :: 4 - Beta",
        "Environment :: Console",
        "Intended Audience :: End Users/Desktop",
        "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
        "Natural Language :: English",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: Implementation :: CPython",
        "Topic :: Utilities",
        "Typing :: Typed",
    ]

    description   = "An average platinum price calculator for tradeable items in Warframe."
    documentation = "https://warmac.readthedocs.io/en/"
    # include = [""]

    keywords = [
        "platinum",
        "warframe calculator",
        "warframe market",
        "warframe",
    ]

    license     = "GPL-3.0-or-later"
    maintainers = ["Noah Jenner <noah.jenner@proton.me>"]
    name        = "WarMAC"
    packages    = [{include = "warmac"}]
    readme      = "README.md"
    repository  = "https://github.com/Eutropios/WarMAC"
    version     = "0.0.5"

    [tool.poetry.dependencies]
        python  = ">=3.8,<3.13"
        urllib3 = "^2.0.4"
    [tool.poetry.scripts]
        warmac = "warmac.main:main"
    [tool.poetry.urls]
        "Bug Tracker" = "https://github.com/Eutropios/WarMAC/issues"
    [tool.poetry.group.dev]
        optional = true
        [tool.poetry.group.dev.dependencies]
            esbonio    = ">=0.16,<1"
            pipdeptree = "^2.13"     # watch this dependency as it pulls in pip
            vermin     = "^1.6"
            viztracer  = ">=0.16,<1"

[tool.poetry.group.docs]
    optional = true
    [tool.poetry.group.docs.dependencies]
        sphinx = [
            {version = ">=7.2,<8", python = "~3.9"},
            {version = "^8", python = ">=3.10,<3.13"},
        ]

        docutils                   = ">=0.18.1"
        furo                       = ">=2023.9"
        python                     = ">=3.10,<3.13"
        sphinx-copybutton          = ">=0.5.2,<1"
        sphinx-inline-tabs         = ">=2023.4.21"
        sphinx-lint                = ">=0.9,<1"
        sphinx-notfound-page       = "^1"
        sphinx_last_updated_by_git = ">=0.3.6,<1"

[tool.poetry.group.test]
    optional = true
    [tool.poetry.group.test.dependencies]
        coverage = "^7.6"
        pytest   = "^8.1" # large dependency, watch for size

[tool.coverage]
    [tool.coverage.run]
        command_line = "-m pytest -v ./tests"
    [tool.coverage.report]
        exclude_also = [
            # Don't complain if non-runnable code isn't run:
            "if TYPE_CHECKING:",
            "if __name__ == .__main__.:",
        ]
        precision = 2

[tool.docformatter]
    black               = true
    pre-summary-newline = true
    recursive           = true
    style               = "sphinx"
    wrap-descriptions   = 72
    wrap-summaries      = 72

[tool.mypy]
    exclude = [
        ".bzr",
        ".direnv",
        ".eggs",
        ".git",
        ".git-rewrite",
        ".hg",
        ".ipynb_checkpoints",
        ".mypy_cache",
        ".nox",
        ".pants.d",
        ".pyenv",
        ".pytest_cache",
        ".pytype",
        ".ruff_cache",
        ".svn",
        ".tox",
        ".venv",
        ".vscode",
        "__pypackages__",
        "_build",
        "buck-out",
        "build",
        "dist",
        "htmlcov",
        "node_modules",
        "site-packages",
        "venv",
    ]

    python_version = "3.12"
    strict         = true

[tool.ruff]
    indent-width   = 4
    line-length    = 88
    preview        = true
    show-fixes     = true
    target-version = "py38"

    [tool.ruff.format]
        exclude = [
            ".bzr",
            ".direnv",
            ".eggs",
            ".git",
            ".git-rewrite",
            ".hg",
            ".ipynb_checkpoints",
            ".mypy_cache",
            ".nox",
            ".pants.d",
            ".pyenv",
            ".pytest_cache",
            ".pytype",
            ".ruff_cache",
            ".svn",
            ".tox",
            ".venv",
            ".vscode",
            "__pypackages__",
            "_build",
            "buck-out",
            "build",
            "dist",
            "htmlcov",
            "node_modules",
            "site-packages",
            "venv",
        ]

        indent-style              = "space"
        line-ending               = "auto"
        quote-style               = "double"
        skip-magic-trailing-comma = false

    [tool.ruff.lint]
        # NOTE: Some rules are turned off by Ruff due to `target-version` to Py 3.8
        explicit-preview-rules = false
        ignore = [
            "AIR",    # Apache Airflow (What even is this?).
            "COM812", # Must be turned off for formatter
            "DJ",     # Django rules (N/A for project)
            "DOC",    # Turn this off for now until DOC supports sphinx-style
            "ERA001", # Commented out code (I do this during development, the warning is annoying)
            "FAST",   # FastAPI rules (N/A for project)
            "FIX",    # I don't use this
            "ISC001", # Must be turned off for formatter
            "ISC002", # Must be turned off for formatter
            "NPY",    # Numpy rules (N/A for project)
            "PD",     # Pandas rules (N/A for project)
            "T20",    # This ruleset flags printing, which my program inherently does
            "TD",     # I don't do TODOs
        ]

        preview = true
        select  = ["ALL"]

        [tool.ruff.lint.flake8-copyright]
            author = "Noah Jenner"

        [tool.ruff.lint.flake8-implicit-str-concat]
            allow-multiline = true

        [tool.ruff.lint.flake8-quotes]
            docstring-quotes = "double"
            inline-quotes    = "double"
            multiline-quotes = "double"

        [tool.ruff.lint.flake8-type-checking]
            strict = true

        [tool.ruff.lint.isort]
            required-imports = ["from __future__ import annotations"]

        [tool.ruff.lint.mccabe]
            max-complexity = 5

        [tool.ruff.lint.per-file-ignores]
            "docs/source/conf.py"  = ["D100", "D104", "I002", "INP001"]
            "tests/**.py"          = ["D103", "I002", "S101"]
            "warmac/__init__.py"   = ["D100", "D104", "I002"]
            "warmac/__main__.py"   = ["D100", "D104", "I002"]
            "warmac/cli_parser.py" = ["SLF001"]
            # *IMPORTANT* - A dirty hack in cli_parser.py uses private components

        [tool.ruff.lint.pycodestyle]
            max-doc-length = 72

        [tool.ruff.lint.pydocstyle]
            # waiting on sphinx convention being added
            convention = "pep257"
